"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPartnerContext = exports.setPartnerContext = exports.checkTransaction = exports.moonpayUrlRegex = exports.baseCreditCardSandboxUrl = exports.finishCCTransaction = void 0;
const processStep_1 = __importDefault(require("./processStep"));
const errors_1 = require("./errors");
const processFileUpload_1 = __importDefault(require("./processFileUpload"));
const finishCCTransaction_1 = __importDefault(require("./finishCCTransaction"));
exports.finishCCTransaction = finishCCTransaction_1.default;
const checkTransaction_1 = __importDefault(require("./checkTransaction"));
exports.checkTransaction = checkTransaction_1.default;
const constants_1 = require("./constants");
Object.defineProperty(exports, "baseCreditCardSandboxUrl", { enumerable: true, get: function () { return constants_1.baseCreditCardSandboxUrl; } });
const getNextKYCStep_1 = require("./KYC/getNextKYCStep");
const text = () => Promise.resolve("Unused");
function successResponse(nextStep) {
    return {
        ok: true,
        json: () => Promise.resolve(nextStep),
        text,
    };
}
function errorResponse(errorObj) {
    return {
        ok: false,
        json: () => Promise.resolve(errorObj),
        text,
    };
}
function isBrave() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        return ((yield ((_a = navigator.brave) === null || _a === void 0 ? void 0 : _a.isBrave())) || false);
    });
}
const moonpayUrlRegex = /https:\/\/(upload\.)?(staging\.)?onramper\.tech\/(transaction\/)?Moonpay.*/;
exports.moonpayUrlRegex = moonpayUrlRegex;
let pContext;
const setPartnerContext = (partnerContext) => {
    pContext = partnerContext !== null && partnerContext !== void 0 ? partnerContext : "";
};
exports.setPartnerContext = setPartnerContext;
const getPartnerContext = () => {
    return pContext;
};
exports.getPartnerContext = getPartnerContext;
exports.default = (url, params) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield isBrave()) {
        return errorResponse({
            message: "Brave's cookie policy is not compatible with Moonpay, please use a different browser",
        });
    }
    try {
        const rawOnramperApiKey = params.headers.get("Authorization");
        if (rawOnramperApiKey === null) {
            return errorResponse({
                message: "Authorization header with API key was not provided",
            });
        }
        const onramperApiKey = rawOnramperApiKey.substr("Basic ".length);
        if (params.body instanceof File) {
            return successResponse(processFileUpload_1.default(url, params.body, onramperApiKey));
        }
        const urlObj = new URL(url);
        const [step, token] = urlObj.pathname.split("/").splice(3);
        const country = urlObj.searchParams.get("country");
        const parsedBody = JSON.parse(params.body);
        return successResponse(yield processStep_1.default(step, token, parsedBody, onramperApiKey, country || "es") // TODO: Pass the country retrieved from params or /gateways
        );
    }
    catch (e) {
        if (e instanceof errors_1.StepError) {
            return errorResponse({
                message: e.message,
                field: e.field,
            });
        }
        // eslint-disable-next-line no-new
        new errors_1.InternalError(JSON.stringify(e));
        getNextKYCStep_1.sentryHub.addBreadcrumb({
            message: `fistStep`,
            data: { d: JSON.stringify(e), e },
        });
        getNextKYCStep_1.sentryHub.captureException(e);
        return errorResponse({
            message: `Unexpected error happened when handling the request: ${e.message}`,
        });
    }
});
