"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fetch_1 = __importDefault(require("./utils/fetch"));
const dynamodb_1 = __importDefault(require("./utils/dynamodb"));
const roundUp_1 = __importDefault(require("./utils/roundUp"));
const dynamoTxs_1 = require("./KYC/dynamoTxs");
const errors_1 = require("./errors");
function default_1(txId, ccTokenId) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const authTx = dynamoTxs_1.getTxAuthToken(txId);
            const creationTx = yield dynamoTxs_1.getCreationTx(txId);
            const networkFeeRequest = (yield fetch_1.default(`https://api.moonpay.io/graphql`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": (yield authTx).csrfToken,
                },
                credentials: "include",
                body: JSON.stringify({
                    operationName: "networkFeeEstimate",
                    variables: {
                        baseCurrencyCode: creationTx.fiatCurrency.toLowerCase(),
                        quoteCurrencyCode: creationTx.cryptoCurrency.toLowerCase(),
                        walletAddress: creationTx.cryptocurrencyAddress,
                    },
                    query: "query networkFeeEstimate($baseCurrencyCode: String!, $quoteCurrencyCode: String!, $walletAddress: String!) {\n  networkFeeEstimate(baseCurrencyCode: $baseCurrencyCode, quoteCurrencyCode: $quoteCurrencyCode, walletAddress: $walletAddress) {\n    fee\n    __typename\n  }\n}\n",
                }),
            }).then((res) => res.json()));
            const moonpayTx = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/transactions`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": (yield authTx).csrfToken,
                },
                credentials: "include",
                body: JSON.stringify({
                    baseCurrencyAmount: roundUp_1.default(creationTx.fiatAmount, 2),
                    networkFeeAmount: networkFeeRequest.data.networkFeeEstimate.fee,
                    extraFeePercentage: creationTx.extraFees,
                    areFeesIncluded: true,
                    walletAddress: creationTx.cryptocurrencyAddress,
                    walletAddressTag: creationTx.cryptocurrencyAddressTag,
                    baseCurrencyCode: creationTx.fiatCurrency.toLowerCase(),
                    currencyCode: creationTx.cryptoCurrency.toLowerCase(),
                    returnUrl: `${constants_1.baseCreditCardSandboxUrl}/finished.html?txId=${txId}`,
                    tokenId: ccTokenId,
                    externalTransactionId: txId,
                }),
            }).then((res) => res.json()));
            dynamodb_1.default.put({
                PK: `tx#${txId}`,
                SK: `complete`,
                Timestamp: Date.now(),
                status: moonpayTx.status,
                moonpayTxId: moonpayTx.id,
            });
            if (moonpayTx.status === "waitingAuthorization") {
                if (typeof moonpayTx.redirectUrl !== "string") {
                    throw new errors_1.StepError("Transaction cannot go through due to your bank's 2FA", null, true);
                }
                return {
                    type: "redirect",
                    url: moonpayTx.redirectUrl,
                };
            }
            if (moonpayTx.status === "completed" || moonpayTx.status === "pending") {
                return {
                    type: "completed",
                    trackingUrl: `https://buy.moonpay.com/transaction_receipt?transactionId=${moonpayTx.id}`,
                };
            }
            throw new errors_1.StepError((_a = moonpayTx.failureReason) !== null && _a !== void 0 ? _a : "Transaction rejected by Moonpay", null, true);
        }
        catch (e) {
            if (e instanceof errors_1.FetchError) {
                let errorMessage = e.errorObject.message;
                if (errorMessage === "Wallet address does not match regex") {
                    errorMessage =
                        "Wallet address does not match regex. Note that if you are using a test API Key only testnet addresses are allowed";
                }
                throw new errors_1.StepError(`Transaction failed: ${errorMessage}.`, null);
            }
            else if (e instanceof errors_1.StepError) {
                throw e;
            }
            else {
                console.log(e);
                throw new errors_1.StepError(`Transaction failed for unexpected reasons.`, null);
            }
        }
    });
}
exports.default = default_1;
