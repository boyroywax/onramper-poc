"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fetch_1 = __importDefault(require("./utils/fetch"));
const dynamodb_1 = __importDefault(require("./utils/dynamodb"));
const roundUp_1 = __importDefault(require("./utils/roundUp"));
const dynamoTxs_1 = require("./KYC/dynamoTxs");
const errors_1 = require("./errors");
function findBankId(bankInfo, bankResponse) {
    var _a;
    return (_a = bankResponse.find((bank) => {
        if (bankInfo.currencyCode === "eur") {
            return bank.iban === bankInfo.iban;
        }
        return (bank.accountNumber === bankInfo.accountNumber &&
            bank.sortCode === bankInfo.sortCode);
    })) === null || _a === void 0 ? void 0 : _a.id;
}
function default_1(txId, csrfToken, bankInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        const commonAPIParams = {
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": csrfToken,
            },
            credentials: "include",
        };
        try {
            const getBanksResponse = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/bank_accounts`, Object.assign({ method: "GET" }, commonAPIParams)).then((res) => res.json()));
            let bankId = findBankId(bankInfo, getBanksResponse);
            if (bankId === undefined) {
                const createBankResponse = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/bank_accounts`, Object.assign(Object.assign({ method: "POST" }, commonAPIParams), { body: JSON.stringify(bankInfo) })).then((res) => res.json()));
                bankId = createBankResponse.id;
            }
            const creationTx = yield dynamoTxs_1.getCreationTx(txId);
            const txCreationResponse = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/transactions`, Object.assign(Object.assign({ method: "POST" }, commonAPIParams), { body: JSON.stringify({
                    baseCurrencyAmount: roundUp_1.default(creationTx.fiatAmount, 2),
                    extraFeePercentage: creationTx.extraFees,
                    areFeesIncluded: true,
                    walletAddress: creationTx.cryptocurrencyAddress,
                    baseCurrencyCode: bankInfo.currencyCode,
                    currencyCode: creationTx.cryptoCurrency.toLowerCase(),
                    bankAccountId: bankId,
                    externalTransactionId: txId,
                }) })).then((res) => res.json()));
            dynamodb_1.default.put({
                PK: `tx#${txId}`,
                SK: `complete`,
                Timestamp: Date.now(),
                status: txCreationResponse.status,
            });
            return {
                type: "requestBankTransaction",
                depositBankAccount: txCreationResponse.bankDepositInformation,
                reference: txCreationResponse.bankTransferReference,
                hint: `Transfer ${creationTx.fiatAmount} ${bankInfo.currencyCode} into the bank account provided to complete the transaction. Your transaction must cite the reference '${txCreationResponse.bankTransferReference}' to be valid.`,
            };
        }
        catch (e) {
            throw new errors_1.StepError("Bank or currency not supported by Moonpay.", null);
        }
    });
}
exports.default = default_1;
