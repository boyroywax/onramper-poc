"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const fetch_1 = __importDefault(require("../utils/fetch"));
const items_1 = require("./items");
const getNextKYCStepFromTxIdAndToken_1 = __importDefault(require("./getNextKYCStepFromTxIdAndToken"));
function default_1(id, token, phoneCode, onramperApiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield fetch_1.default(`${constants_1.moonpayBaseAPI}/customers/verify_phone_number`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": token,
                },
                credentials: "include",
                body: JSON.stringify({
                    verificationCode: phoneCode,
                }),
            }).then((r) => r.json());
            if (response.success !== true) {
                throw new Error();
            }
        }
        catch (e) {
            throw new errors_1.StepError("The provided phone code has been rejected.", items_1.verifyPhoneCodeItem.name);
        }
        return getNextKYCStepFromTxIdAndToken_1.default(id, token, onramperApiKey);
    });
}
exports.default = default_1;
