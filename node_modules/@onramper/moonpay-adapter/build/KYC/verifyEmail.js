"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const token_1 = require("../utils/token");
const dynamodb_1 = __importDefault(require("../utils/dynamodb"));
const getNextKYCStepFromTxIdAndToken_1 = __importDefault(require("./getNextKYCStepFromTxIdAndToken"));
const fetch_1 = __importDefault(require("../utils/fetch"));
const items = __importStar(require("./items"));
function default_1(id, email, code, onramperApiKey, _ // country: string
) {
    return __awaiter(this, void 0, void 0, function* () {
        let res;
        try {
            res = yield fetch_1.default(`${constants_1.moonpayBaseAPI}/customers/email_login?apiKey=${constants_1.publishableApiKey(onramperApiKey)}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify({
                    email,
                    securityCode: code,
                }),
            }).then((response) => response.json());
        }
        catch (e) {
            throw new errors_1.StepError("The email code has been rejected.", items.verifyEmailCodeItem.name);
        }
        const customer = res.customer;
        const token = res.csrfToken;
        if (token === undefined) {
            throw new errors_1.ApiError("Moonpay API has changed and no longer sets cookies on the /customers/email_login endpoint.");
        }
        yield dynamodb_1.default.put({
            PK: `tx#${id}`,
            SK: `verifyEmail`,
            Timestamp: Date.now(),
            csrfToken: token,
        });
        if (customer.firstName === null ||
            customer.dateOfBirth === null ||
            customer.address.street === null) {
            const requiredData = [
                items.firstNameItem,
                items.lastNameItem,
                items.streetItem,
                items.townItem,
                items.postCodeItem,
                items.countryItem,
                items.optionalStateItem,
            ];
            requiredData.push(items.dateOfBirthItem);
            /* if (country === "us") { // TODO: Remove
              requiredData.push(items.optionalStateItem);
            } */
            return {
                type: "form",
                url: `${constants_1.baseAPIUrl}/transaction/${constants_1.identifier}/identity/${token_1.encodeToken([
                    id,
                    token,
                ])}`,
                data: requiredData,
            };
        }
        try {
            const nextKYCStep = yield getNextKYCStepFromTxIdAndToken_1.default(id, token, onramperApiKey);
            return nextKYCStep;
        }
        catch (e) {
            if (e instanceof errors_1.FetchError && e.errorObject.type === "UnauthorizedError") {
                throw new errors_1.StepError("This browser's cookie policy is not compatible with Moonpay, please use a different browser", null);
            }
            throw e;
        }
    });
}
exports.default = default_1;
