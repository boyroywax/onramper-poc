"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enhancedDiligenceVerification = exports.processsEnhancedDiligenceVerificationProofOfIncomeStep = exports.generateEnhancedDiligenceVerificationStep = exports.generateDiligenceVerificationStep = void 0;
const errors_1 = require("../../errors");
const token_1 = require("../../utils/token");
const items = __importStar(require("../items"));
const getNextKYCStepFromTxIdAndToken_1 = __importDefault(require("../getNextKYCStepFromTxIdAndToken"));
const constants_1 = require("../../constants");
const getNextKYCStep_1 = require("../getNextKYCStep");
function generateDiligenceVerificationStep(txId, fiatCurrency, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return {
            type: "form",
            humanName: "Answer some final questions",
            hint: "To protect your account, we need to ask you some final questions.",
            url: `${constants_1.baseAPIUrl}/transaction/${constants_1.identifier}/diligenceVerification/${token_1.encodeToken([txId, fiatCurrency, token])}`,
            data: [
                items.accountPurpose,
                items.employmentStatus,
                items.grossAnnualIncome,
                items.sourceOfFunds,
                items.annualExpectedActivity,
            ],
        };
    });
}
exports.generateDiligenceVerificationStep = generateDiligenceVerificationStep;
function generateEnhancedDiligenceVerificationStep(txId, fiatCurrency, alpha3Country, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return {
            type: "form",
            humanName: "Answer some final questions",
            hint: "To protect your account, we need to ask you a few final questions.",
            url: `${constants_1.baseAPIUrl}/transaction/${constants_1.identifier}/proofOfIncome/${token_1.encodeToken([
                txId,
                fiatCurrency,
                alpha3Country,
                token,
            ])}`,
            data: [items.netWorth, items.profession],
        };
    });
}
exports.generateEnhancedDiligenceVerificationStep = generateEnhancedDiligenceVerificationStep;
function processsEnhancedDiligenceVerificationProofOfIncomeStep(tokenValues, body, _onramperApiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!token_1.checkTokenTypes(tokenValues, [
            "",
            "",
            "",
            "",
        ])) {
            throw new errors_1.StepError("URL is incorrect.", null);
        }
        const [id, fiatCurrency, alpha3Country, csrfToken] = tokenValues;
        const result = (yield fetch(`https://api.moonpay.io/graphql`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": csrfToken,
            },
            credentials: "include",
            body: JSON.stringify({
                operationName: "updateEnhancedDueDiligence",
                variables: {
                    netWorth: body[items.netWorth.name],
                    profession: body[items.profession.name],
                    currencyCode: fiatCurrency.toLowerCase(),
                },
                query: "mutation updateEnhancedDueDiligence($currencyCode: String, $netWorth: NetWorth!, $profession: String!) {\n  updateEnhancedDueDiligence(currencyCode: $currencyCode, netWorth: $netWorth, profession: $profession) {\n    success\n    __typename\n  }\n}\n",
            }),
        })
            .then((res) => res.json())
            .catch((e) => {
            throw new errors_1.StepError(`Customer due diligence verification failed: ${e.errors[0].message}`, null);
        }));
        if (!result.data.updateEnhancedDueDiligence.success) {
            getNextKYCStep_1.sentryHub.addBreadcrumb({
                message: `updateEnhancedDueDiligence`,
                data: { d: JSON.stringify(result) },
            });
            throw new errors_1.StepError(`Customer due diligence verification failed, please, contact support@onramper.com ${JSON.stringify(result)}`, null);
        }
        return {
            type: "file",
            humanName: "Proof of income document",
            hint: "You can upload payslips, bank statements, tax returns, etc.",
            url: `${constants_1.baseUploadsUrl}/${constants_1.identifier}/proof_of_income/${id}/${alpha3Country}/${csrfToken}`,
            acceptedContentTypes: [
                "image/jpg",
                "image/jpeg",
                "image/png",
                "application/pdf",
            ],
        };
    });
}
exports.processsEnhancedDiligenceVerificationProofOfIncomeStep = processsEnhancedDiligenceVerificationProofOfIncomeStep;
function default_1(tokenValues, body, onramperApiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!token_1.checkTokenTypes(tokenValues, ["", "", ""])) {
            throw new errors_1.StepError("URL is incorrect.", null);
        }
        const [id, fiatCurrency, csrfToken] = tokenValues;
        token_1.checkBodyParams(body, [
            items.accountPurpose,
            items.employmentStatus,
            items.grossAnnualIncome,
            items.sourceOfFunds,
            items.annualExpectedActivity,
        ]);
        const result = (yield fetch(`https://api.moonpay.io/graphql`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": csrfToken,
            },
            credentials: "include",
            body: JSON.stringify({
                operationName: "updateCustomerDueDiligence",
                variables: {
                    accountPurpose: body[items.accountPurpose.name],
                    annualExpectedActivity: body[items.annualExpectedActivity.name],
                    currencyCode: fiatCurrency.toLowerCase(),
                    employmentStatus: body[items.employmentStatus.name],
                    grossAnnualIncome: body[items.grossAnnualIncome.name],
                    sourceOfFunds: body[items.sourceOfFunds.name],
                },
                query: "mutation updateCustomerDueDiligence($currencyCode: String!, $employmentStatus: EmploymentStatus!, $sourceOfFunds: SourceOfFunds!, $accountPurpose: AccountPurpose!, $annualExpectedActivity: AnnualExpectedActivity!, $grossAnnualIncome: GrossAnnualIncome!) {\n  updateCustomerDueDiligence(currencyCode: $currencyCode, employmentStatus: $employmentStatus, sourceOfFunds: $sourceOfFunds, accountPurpose: $accountPurpose, annualExpectedActivity: $annualExpectedActivity, grossAnnualIncome: $grossAnnualIncome) {\n    success\n    __typename\n  }\n}\n",
            }),
        }).then((res) => res.json()));
        if (!result.data.updateCustomerDueDiligence.success) {
            getNextKYCStep_1.sentryHub.addBreadcrumb({
                message: `updateCustomerDueDiligence`,
                data: { d: JSON.stringify(result) },
            });
            throw new errors_1.StepError("Customer due diligence verification failed, please, contact support@onramper.com", null);
        }
        return getNextKYCStepFromTxIdAndToken_1.default(id, csrfToken, onramperApiKey);
    });
}
exports.default = default_1;
function enhancedDiligenceVerification(tokenValues, body, onramperApiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!token_1.checkTokenTypes(tokenValues, ["", "", ""])) {
            throw new errors_1.StepError("URL is incorrect.", null);
        }
        const [id, fiatCurrency, csrfToken] = tokenValues;
        token_1.checkBodyParams(body, [
            items.accountPurpose,
            items.employmentStatus,
            items.grossAnnualIncome,
            items.sourceOfFunds,
            items.annualExpectedActivity,
        ]);
        const result = (yield fetch(`https://api.moonpay.io/graphql`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": csrfToken,
            },
            credentials: "include",
            body: JSON.stringify({
                operationName: "updateCustomerDueDiligence",
                variables: {
                    accountPurpose: body[items.accountPurpose.name],
                    annualExpectedActivity: body[items.annualExpectedActivity.name],
                    currencyCode: fiatCurrency.toLowerCase(),
                    employmentStatus: body[items.employmentStatus.name],
                    grossAnnualIncome: body[items.grossAnnualIncome.name],
                    sourceOfFunds: body[items.sourceOfFunds.name],
                },
                query: "mutation updateCustomerDueDiligence($currencyCode: String!, $employmentStatus: EmploymentStatus!, $sourceOfFunds: SourceOfFunds!, $accountPurpose: AccountPurpose!, $annualExpectedActivity: AnnualExpectedActivity!, $grossAnnualIncome: GrossAnnualIncome!) {\n  updateCustomerDueDiligence(currencyCode: $currencyCode, employmentStatus: $employmentStatus, sourceOfFunds: $sourceOfFunds, accountPurpose: $accountPurpose, annualExpectedActivity: $annualExpectedActivity, grossAnnualIncome: $grossAnnualIncome) {\n    success\n    __typename\n  }\n}\n",
            }),
        }).then((res) => res.json()));
        if (!result.data.updateCustomerDueDiligence.success) {
            getNextKYCStep_1.sentryHub.addBreadcrumb({
                message: `updateCustomerDueDiligence`,
                data: { d: JSON.stringify(result) },
            });
            throw new errors_1.StepError("Customer due diligence verification failed, please, contact support@onramper.com", null);
        }
        return getNextKYCStepFromTxIdAndToken_1.default(id, csrfToken, onramperApiKey);
    });
}
exports.enhancedDiligenceVerification = enhancedDiligenceVerification;
