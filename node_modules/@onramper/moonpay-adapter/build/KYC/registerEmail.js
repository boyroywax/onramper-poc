"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const fetch_1 = __importDefault(require("../utils/fetch"));
const errors_1 = require("../errors");
const token_1 = require("../utils/token");
const dynamoTxs_1 = require("./dynamoTxs");
const items = __importStar(require("./items"));
const validateAddress_1 = __importDefault(require("../utils/validateAddress"));
const extractEnv_1 = __importDefault(require("../utils/extractEnv"));
function default_1(id, amount, fiatCurrency, cryptoCurrency, paymentMethod, onramperApiKey, email, cryptocurrencyAddress, cryptocurrencyAddressTag, country) {
    return __awaiter(this, void 0, void 0, function* () {
        const apiEnv = extractEnv_1.default(onramperApiKey);
        // TODO: Validate all new transaction data
        if (apiEnv === "prod" &&
            validateAddress_1.default(cryptocurrencyAddress, cryptoCurrency) === false) {
            throw new errors_1.StepError("The provided cryptocurrency address is not valid.", items.cryptocurrencyAddress.name);
        }
        let onramperFees;
        try {
            onramperFees = yield fetch_1.default(`${constants_1.baseAPIUrl}/partner/fees`, {
                method: "GET",
                headers: {
                    Authorization: `Basic ${onramperApiKey}`,
                },
            }).then((r) => r.json());
        }
        catch (e) {
            throw new errors_1.StepError("The provided API key is invalid.", null);
        }
        try {
            const res = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/customers/email_login?apiKey=${constants_1.publishableApiKey(onramperApiKey)}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify({
                    email,
                }),
            }).then((r) => r.json()));
            if (!res.preAuthenticated) {
                throw new Error();
            }
        }
        catch (e) {
            throw new errors_1.StepError("The provided email has been rejected.", items.emailItem.name);
        }
        const record = {
            fiatCurrency,
            cryptoCurrency,
            fiatAmount: amount,
            paymentMethod,
            extraFees: onramperFees.total,
        };
        yield dynamoTxs_1.createCreationTx(Object.assign(Object.assign({ PK: `tx#${id}`, SK: `create`, Timestamp: Date.now() }, record), { cryptocurrencyAddress,
            cryptocurrencyAddressTag,
            country, apiKey: onramperApiKey }));
        const termsOfUse = {
            type: "boolean",
            name: "termsOfUse",
            terms: [
                {
                    url: "https://onramper.com/terms-of-use/",
                    humanName: "Onramper's Terms Of Use",
                },
                {
                    url: "https://onramper.com/privacy-policy/",
                    humanName: "Onramper's Privacy Policy",
                },
                {
                    url: "https://moonpay.io/terms_of_use/",
                    humanName: "Moonpay's Terms Of Use",
                },
                {
                    url: "https://moonpay.io/privacy_policy/",
                    humanName: "Moonpay's Privacy Policy",
                },
            ],
        };
        if (country === "us") {
            termsOfUse.terms.push({
                url: "https://buy.moonpay.io/ZeroHashLLCServicesAgreement.pdf",
                humanName: "Zero Hash LLC Services Agreement",
            });
        }
        return {
            type: "form",
            url: `${constants_1.baseAPIUrl}/transaction/${constants_1.identifier}/verifyEmail/${token_1.encodeToken([
                id,
                email,
            ])}`,
            data: [items.verifyEmailCodeItem, termsOfUse],
        };
    });
}
exports.default = default_1;
