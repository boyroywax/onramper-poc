"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAllMockTxs = exports.createMockTxAuthToken = exports.createMockCreationTx = void 0;
const dynamodb_1 = __importDefault(require("../utils/dynamodb"));
const dynamoTxs_1 = require("./dynamoTxs");
function createMockCreationTx(tx) {
    return __awaiter(this, void 0, void 0, function* () {
        yield dynamoTxs_1.createCreationTx(Object.assign({ PK: `tx#123`, SK: `create`, Timestamp: 12340, fiatCurrency: "EUR", cryptoCurrency: "BTC", fiatAmount: 100, paymentMethod: "creditCard", country: "es", cryptocurrencyAddress: "0xpleb", cryptocurrencyAddressTag: undefined, apiKey: "pk_test_MOCK", extraFees: 10 }, tx));
    });
}
exports.createMockCreationTx = createMockCreationTx;
function createMockTxAuthToken(tx) {
    return __awaiter(this, void 0, void 0, function* () {
        yield dynamodb_1.default.put(Object.assign({ PK: `tx#123`, SK: `verifyEmail`, Timestamp: 12345, csrfToken: "moonpayCsrfToken" }, tx));
    });
}
exports.createMockTxAuthToken = createMockTxAuthToken;
function createAllMockTxs(id = "123") {
    return __awaiter(this, void 0, void 0, function* () {
        yield createMockCreationTx({ PK: `tx#${id}` });
        yield createMockTxAuthToken({ PK: `tx#${id}` });
    });
}
exports.createAllMockTxs = createAllMockTxs;
