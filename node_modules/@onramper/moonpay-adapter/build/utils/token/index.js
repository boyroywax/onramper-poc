"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkBodyParams = exports.checkTokenTypes = exports.randomId = exports.encodeJson = exports.decodeToken = exports.encodeToken = void 0;
const StepError_1 = __importDefault(require("../../errors/StepError"));
const encodeToken_1 = require("./encodeToken");
Object.defineProperty(exports, "encodeToken", { enumerable: true, get: function () { return encodeToken_1.encodeToken; } });
Object.defineProperty(exports, "decodeToken", { enumerable: true, get: function () { return encodeToken_1.decodeToken; } });
function encodeJson(data) {
    return encodeToken_1.safeEncode(JSON.stringify(data));
}
exports.encodeJson = encodeJson;
function randomId() {
    return Math.random().toString();
}
exports.randomId = randomId;
function checkTokenTypes(decodedValues, sampleValues) {
    for (let i = 0; i < sampleValues.length; i += 1) {
        if (typeof decodedValues[i] !== typeof sampleValues[i]) {
            return false;
        }
    }
    return true;
}
exports.checkTokenTypes = checkTokenTypes;
function checkInteger(num, errorMessage, fieldName) {
    if (typeof num !== "number") {
        throw new StepError_1.default(`${errorMessage} is not a number.`, fieldName);
    }
    if (num % 1 !== 0) {
        throw new StepError_1.default(`${errorMessage} is not an integer.`, fieldName);
    }
}
function checkBodyParams(body, keys) {
    keys.forEach((bodyKey) => {
        if (bodyKey.required === false) {
            return;
        }
        const bodyKeyName = bodyKey.name;
        const bodyValue = body[bodyKeyName];
        if (bodyValue === undefined) {
            throw new StepError_1.default(`Parameter '${bodyKeyName}' is not defined on json body.`, bodyKeyName);
        }
        if (bodyKey.type === "date") {
            const errorMessage = `Parameter '${bodyKeyName}' is a date, so it should be an object with integer number properties 'day', 'month' and 'year'. However,`;
            if (typeof bodyValue !== "object") {
                throw new StepError_1.default(`${errorMessage} '${bodyKeyName}' is not an object.`, bodyKeyName);
            }
            ["day", "month", "year"].forEach((dateKey) => checkInteger(bodyValue[dateKey], `${errorMessage} property '${dateKey}'`, bodyKeyName));
        }
        else if (bodyKey.type === "string") {
            if (typeof bodyValue !== "string") {
                throw new StepError_1.default(`Parameter '${bodyKeyName}' found on json body is not a string.`, bodyKeyName);
            }
        }
        else if (bodyKey.type === "integer") {
            checkInteger(bodyValue, `Parameter '${bodyKeyName}' found on json body`, bodyKeyName);
        }
    });
}
exports.checkBodyParams = checkBodyParams;
