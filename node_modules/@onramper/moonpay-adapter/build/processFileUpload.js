"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const getDocumentHumanName_1 = __importDefault(require("./documents/getDocumentHumanName"));
const processStep_1 = __importDefault(require("./processStep"));
const token_1 = require("./utils/token");
const errors_1 = require("./errors");
const fetch_1 = __importDefault(require("./utils/fetch"));
function default_1(url, file, onramperApiKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const urlPath = new URL(url).pathname.substr(1);
        const [gatewayIdentifier, documentType, txId, alpha3Country, token, side,] = urlPath.split("/");
        const contentType = file.type;
        if (!constants_1.acceptedContentTypes.includes(contentType)) {
            throw new errors_1.StepError("The only 'content-type's accepted are `image/jpeg`, `image/png` and `application/pdf` but this request is none of these", null);
        }
        const { signedRequest, key } = (yield fetch_1.default(`${constants_1.moonpayBaseAPI}/files/s3_signed_request?apiKey=${constants_1.publishableApiKey(onramperApiKey)}&fileType=${contentType}`).then((res) => res.json()));
        yield fetch_1.default(signedRequest, {
            method: "PUT",
            body: file,
        });
        const filesEndpointBody = {
            key,
            type: documentType,
            country: alpha3Country,
        };
        if (documentType === "proof_of_income") {
            filesEndpointBody.checkReadability = false;
        }
        else {
            filesEndpointBody.side = side;
        }
        yield fetch_1.default(`${constants_1.moonpayBaseAPI}/files`, {
            method: "POST",
            headers: {
                "X-CSRF-TOKEN": token,
                "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify(filesEndpointBody),
        });
        if (side === "front" &&
            (documentType === "national_identity_card" ||
                documentType === "driving_licence")) {
            return {
                type: "file",
                humanName: `${getDocumentHumanName_1.default(documentType)} - Back`,
                url: `${constants_1.baseUploadsUrl}/${gatewayIdentifier}/${documentType}/${txId}/${alpha3Country}/${token}/back`,
                acceptedContentTypes: constants_1.acceptedContentTypes,
            };
        }
        const followingStep = yield processStep_1.default("getNextKYCStep", token_1.encodeToken([txId, token]), "{}", onramperApiKey, "" // Country doesn't matter here
        );
        return followingStep;
    });
}
exports.default = default_1;
