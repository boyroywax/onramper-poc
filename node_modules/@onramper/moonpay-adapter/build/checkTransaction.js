"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dynamoTxs_1 = require("./KYC/dynamoTxs");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
function default_1(moonpayTxId, txId) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const authTx = dynamoTxs_1.getTxAuthToken(txId);
        const moonpayTx = (yield fetch(`${constants_1.moonpayBaseAPI}/transactions/${moonpayTxId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": (yield authTx).csrfToken,
            },
            credentials: "include",
        }).then((res) => res.json()));
        if (moonpayTx.status === "completed" || moonpayTx.status === "pending") {
            return {
                type: "completed",
                trackingUrl: `https://buy.moonpay.com/transaction_receipt?transactionId=${moonpayTx.id}`,
            };
        }
        throw new errors_1.StepError((_a = moonpayTx.failureReason) !== null && _a !== void 0 ? _a : "Transaction failed", null, true);
    });
}
exports.default = default_1;
